
# 每个节点执行

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

wget https://github.com/containerd/containerd/releases/download/v1.6.24/containerd-1.6.24-linux-amd64.tar.gz -O containerd-1.6.24-linux-amd64.tar.gz

tar Cxzvf /usr/local containerd-1.6.24-linux-amd64.tar.gz

mkdir -p  /usr/local/lib/systemd/system/

wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -O /usr/local/lib/systemd/system/containerd.service

systemctl daemon-reload

systemctl enable --now containerd

wget https://github.com/opencontainers/runc/releases/download/v1.1.9/runc.amd64 -O runc.amd64

install -m 755 runc.amd64 /usr/local/sbin/runc

wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz -O cni-plugins-linux-amd64-v1.3.0.tgz

mkdir -p /opt/cni/bin

tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.3.0.tgz

mkdir -p /etc/containerd/

containerd config default > /etc/containerd/config.toml

if [ "`grep 'SystemdCgroup = true' /etc/containerd/config.toml`" == "" ]; then sed -i "s/SystemdCgroup = false/SystemdCgroup = true/g" /etc/containerd/config.toml; fi

systemctl restart containerd

apt-get install -y apt-transport-https ca-certificates curl

mkdir -p -m 755 /etc/apt/keyrings

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt-get update

apt-get install -y kubelet kubeadm kubectl

apt-mark hold kubelet kubeadm kubectl

kubectl version --client


# 主节点初始化

kubeadm init --image-repository registry.aliyuncs.com/google_containers





